Question: “MagicBattleSimulator”

Project Name: MagicBattleSimulator

Step 1: Utility Class

Create a class named MagicUtils

Public & Static Method 1: getRandomSpellPower()

Returns a double

Generates a random number between 5 and 15 and returns it

Public & Static Method 2: getRandomCursePower()

Returns a double

Generates a random number between 0 and 10 and returns it

Step 2: Abstract Character Class

Create an abstract class Wizard

Private attributes: mana (double), health (double)

Getter and setter methods for mana and health

Constructor to initialize mana and health

Abstract method: castSpell() → receives nothing, returns double

Method: takeDamage(Wizard opponent) → subtracts opponent.castSpell() from this object’s health

Step 3: Player Class

Create a class named Sorcerer (inherits Wizard)

Constructor as needed

Implement castSpell()

Returns mana * MagicUtils.getRandomSpellPower()

Step 4: Villain Class

Create a class named DarkMage (inherits Wizard)

Constructor as needed

Implement castSpell()

Returns mana * MagicUtils.getRandomCursePower()

Step 5: Main Method

Inside main():

Create a Sorcerer object with mana = 10, health = 120

Create a DarkMage object with mana = 10, health = 120

Use a while(true) loop, and inside the loop:

Sorcerer takes damage from DarkMage

DarkMage takes damage from Sorcerer

Print health values:

Sorcerer Health: XX.XX, DarkMage Health: XX.XX


If Sorcerer’s health ≤ 0 → print "Sorcerer Lost" and break loop

If DarkMage’s health ≤ 0 → print "DarkMage Lost" and break loop

Sample Output (values will vary due to randomness)
Sorcerer Health: 105.23, DarkMage Health: 85.12
Sorcerer Health: 92.48, DarkMage Health: 60.54
Sorcerer Health: 70.30, DarkMage Health: 40.12
Sorcerer Health: 55.10, DarkMage Health: 10.65
Sorcerer Health: 48.90, DarkMage Health: -5.20
DarkMage Lost


class MagicUtils{
    public static double getRandomSpellPower(){
        return ((Math.random()*3) + 1);
    }

    public static double getRandomCursePower(){
        return ((Math.random()*2));
    }
}

abstract class Wizard{
    private double mana;
    private double health;

    public double getMana() {
        return mana;
    }

    public void setMana(double mana) {
        this.mana = mana;
    }

    public double getHealth() {
        return health;
    }

    public void setHealth(double health) {
        this.health = health;
    }

    public Wizard(double mana, double health) {
        this.mana = mana;
        this.health = health;
    }

    public abstract double castSpell();

    public void takeDamage(Wizard opponent){
        this.health = getHealth() - opponent.castSpell();
    }
}

class Sorcerer extends Wizard{
    public Sorcerer(double mana, double health) {
        super(mana, health);
    }

    public double castSpell(){
        return getMana() * MagicUtils.getRandomSpellPower();
    }
}

class Darkmage extends Wizard{
    public Darkmage(double mana, double health) {
        super(mana, health);
    }

    public double castSpell(){
        return getMana() * MagicUtils.getRandomCursePower();
    }
}

public class Main{
    public static void main(String[] args){
        Wizard s = new Sorcerer(10, 120);
        Wizard d = new Darkmage(10, 120);

        while(true){
            s.takeDamage(d);
            d.takeDamage(s);
            System.out.println("Sorcerer Health: " + s.getHealth() + " Darkmage Health: " + d.getHealth());
            if(s.getHealth()<=0){
                System.out.println("Sorcerer Lost");
                break;
            }
            else if (d.getHealth()<=0) {
                System.out.println("Darkmage Lost");
                break;
            }
        }
    }
}




Question: “RPGWeaponManagement”

Create a project named “RPGWeaponManagement”

Create an abstract class named Weapon

Method 1: useWeapon

Receives nothing, returns nothing.

This method has no body, it only defines a template for subclasses to implement.

Create a class named Sword (inherits Weapon)

Method 1: useWeapon

Receives nothing, returns nothing.

Prints "Sword slashes for 15 damage"

Create a class named Bow (inherits Weapon)

Method 1: useWeapon

Receives nothing, returns nothing.

Prints "Bow shoots for 10 damage"

Create a class named WeaponInventory

Private & static attribute: weaponsList (ArrayList that contains Weapon objects)

Public & static method 1: addWeapon

Receives a Weapon object, returns nothing

Adds the weapon to weaponsList

Prints "Total Weapons in inventory: {count}"

Public & static method 2: activateWeapon

Receives an index (int), returns nothing

If the index is valid, call useWeapon() of the weapon at that index

Else, print "Invalid Index"

Inside the main method:

Create 2 Sword and 2 Bow objects

Add all 4 to WeaponInventory using addWeapon method

Ask the user to input 2 indices to activate weapons

Call activateWeapon with the indices provided

Sample Input
Weapon to Activate:
1
Weapon to Activate:
5

Sample Output
Total Weapons in inventory: 1
Total Weapons in inventory: 2
Total Weapons in inventory: 3
Total Weapons in inventory: 4
Sword slashes for 15 damage
Invalid Index


import java.util.ArrayList;

abstract class Weapon{
    public abstract void useWeapon();
}

class Sword extends Weapon{
    public void useWeapon() {
        System.out.println("Sword slashes for 15 damage");
    }
}

class Bow extends Weapon{
    public void useWeapon() {
        System.out.println("Bow shoots for 10 damage");
    }
}

class WeaponInventory{
     private static ArrayList<Weapon> weaponsList = new ArrayList<>();

     public static void addWeapon(Weapon wep){
         weaponsList.add(wep);
         System.out.println("Total weapons in Inventory: " + weaponsList.size());
     }

     public static void activateWeapon(int index){
         if(index>=1 && index<= weaponsList.size()){
             weaponsList.get(index-1).useWeapon();
         }
         else{
             System.out.println("Invalid Index");
         }
     }
}

public class Main{
    public static void main(String[] args){
        Weapon s1 = new Sword();
        Weapon s2 = new Sword();
        Weapon b = new Bow();

        WeaponInventory.addWeapon(s1);
        WeaponInventory.addWeapon(s2);
        WeaponInventory.addWeapon(b);

        WeaponInventory.activateWeapon(1);
        WeaponInventory.activateWeapon(3);
        WeaponInventory.activateWeapon(5);


    }
}



To produce a random number, you can use Math.Random(). This method returns a random
value between 0.0 (inclusive) and 1.0 (exclusive). If you want to scale it to a different range, you
can use addition or multiplication. For example, if I want to shift the random value to the range
of 1 to 2, I can add 1 to the Random Value.
- Create a project named “SimpleAutoRPG”
- Create a class named MultiplierUtils
- (Public & Static) Method 1: getRandomBuff
- Returns a double
- This method generates a random number between 1 and 2 and returns it.
- (Public & Static) Method 2: getRandomNerf
- Returns a double
- This method generates a random number between 0 and 1 and returns it.

- Create a class named Character
- Private attributes: damage (double), health (double)
- Create getter/setter methods and constructors as needed.
- Method 1: attack
- Receives nothing, returns double
- This method does not have a body. It only defines a template for subclasses to
use.

- Method 2: takeDamage
- Receives a Character object as a parameter, returns nothing.
- Subtracts the returned value of the attack method from the value of the health
of the current object.
- Create a class named Player (inherits Character)
- Create a constructor as per your needs.
- Method 1: attack
- Receives nothing, returns double
- Returns the value of damage * MultiplierUtils.getRandomBuff()

- Create a class named Villain (inherits Character)
- Create a constructor as per your needs.
- Method 1: attack
- Receives nothing, returns double
- Returns the value of damage * MultiplierUtils.getRandomNerf()

- Inside main method:
- Create a player object with damage 10, health 100.
- Create a villain object with damage 10, health 100.
- Create a while loop with a condition set to true, and inside the while loop, do:
- Call the takeDamage method of the Player object, passing the villain object as a
parameter.
- Call the takeDamage method of the Villain object, passing the Player object as a
parameter.

- Print the health values of both the Player object and Villain object.
- If the health of the Player object drops below 0, Print “Player Lost” and break
the loop.
- If the health of the Villain object drops below 0, Print “Villain Lost” and break
the loop.
- The sample output will likely not match your output, as we are using random
numbers.

Sample Output
Player Health: 97.94, Villain Health: 82.81
Player Health: 90.67, Villain Health: 65.14
Player Health: 90.09, Villain Health: 50.54
Player Health: 85.12, Villain Health: 36.58
Player Health: 79.50, Villain Health: 22.78
Player Health: 79.10, Villain Health: 9.37
Player Health: 76.72, Villain Health: -9.72
Evil Boss Lost



import java.util.Scanner;

// Utility class for random multipliers
class MultiplierUtils {
    public static double getRandomBuff() {
        return Math.random() + 1; // 1.0 to 2.0
    }

    public static double getRandomNerf() {
        return Math.random(); // 0.0 to 1.0
    }
}

// Abstract Character class
abstract class Character {
    private double damage;
    private double health;

    public Character(double damage, double health) {
        this.damage = damage;
        this.health = health;
    }

    public double getDamage() { return damage; }
    public double getHealth() { return health; }
    public void setHealth(double health) { this.health = health; }

    // Abstract attack method
    public abstract double attack();

    // Take damage from another character
    public void takeDamage(Character attacker) {
        this.health -= attacker.attack();
    }
}

// Player class
class Player extends Character {
    public Player(double damage, double health) {
        super(damage, health);
    }

    @Override
    public double attack() {
        return getDamage() * MultiplierUtils.getRandomBuff();
    }
}

// Villain class
class Villain extends Character {
    public Villain(double damage, double health) {
        super(damage, health);
    }

    @Override
    public double attack() {
        return getDamage() * MultiplierUtils.getRandomNerf();
    }
}

// Main class
public class SimpleAutoRPG {
    public static void main(String[] args) {
        Player player = new Player(10, 100);
        Villain villain = new Villain(10, 100);

        while (true) {
            player.takeDamage(villain);
            villain.takeDamage(player);

            System.out.printf("Player Health: %.2f, Villain Health: %.2f%n", 
                               player.getHealth(), villain.getHealth());

            if (player.getHealth() <= 0) {
                System.out.println("Player Lost");
                break;
            } else if (villain.getHealth() <= 0) {
                System.out.println("Villain Lost");
                break;
            }
        }
    }
}







- Create a project named “RPGInventoryManagement”
- Create a class named “Potion”
- Method 1: addEffect
- Recives nothing, returns nothing.
- This method has no body, it only defines a template for subclasses to use.
- Create a class named “Health” (inherits Potion)
- Method 1: addEffect
- Recives nothing, returns nothing.
- Prints “Health +10”

- Create a class named “Stamina” (inherits Potion)
- Method 1: addEffect
- Receives nothing, returns nothing
- Prints “Stamina +10”
- Create a class named “Inventory”
- Private & Static attributes: potionsList (An Array/ArrayList that contains Potions object,
you may initialize the Array/ArrayList in any proper way).
- (Public & Static) Method 1: addPotion
- Recieves Potion object, Returns nothing
- Adds the passed Potion object to the potionList. Prints “Number of Total Potion
in the inventory: {count of total Potion in the Array/ArrayList}”.

- (Public & Static) Method 2: activatePotion
- Receives an index (int), returns nothing
- Check if the index is valid. If so, call addEffect method. Else print “Invalid Index”.

- Inside main method:
- Create 2 Health and 2 Stamina Object. No user input required.
- Add them to the potionList of Inventory using addPotion method.
- Now call activatePotion method 2 times, taking the index from the user.

Sample Input Sample Output
Potion to Activate:
2
Potion to Activate:
5

Number of Total Potion in the
inventory: 1
Number of Total Potion in the
inventory: 2
Number of Total Potion in the
inventory: 3
Number of Total Potion in the
inventory: 4
Health +10
Invalid Index



import java.util.ArrayList;
import java.util.Scanner;

// Abstract Potion class
abstract class Potion {
    public abstract void addEffect();
}

// Health Potion
class Health extends Potion {
    @Override
    public void addEffect() {
        System.out.println("Health +10");
    }
}

// Stamina Potion
class Stamina extends Potion {
    @Override
    public void addEffect() {
        System.out.println("Stamina +10");
    }
}

// Inventory class
class Inventory {
    private static ArrayList<Potion> potionsList = new ArrayList<>();

    public static void addPotion(Potion p) {
        potionsList.add(p);
        System.out.println("Number of Total Potion in the inventory: " + potionsList.size());
    }

    public static void activatePotion(int index) {
        if (index >= 1 && index <= potionsList.size()) {
            potionsList.get(index - 1).addEffect(); // 1-based index
        } else {
            System.out.println("Invalid Index");
        }
    }
}

// Main class
public class RPGInventoryManagement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Create potions
        Inventory.addPotion(new Health());
        Inventory.addPotion(new Health());
        Inventory.addPotion(new Stamina());
        Inventory.addPotion(new Stamina());

        // Activate potions twice based on user input
        for (int i = 0; i < 2; i++) {
            System.out.println("Potion to Activate:");
            int index = sc.nextInt();
            Inventory.activatePotion(index);
        }
    }
}
